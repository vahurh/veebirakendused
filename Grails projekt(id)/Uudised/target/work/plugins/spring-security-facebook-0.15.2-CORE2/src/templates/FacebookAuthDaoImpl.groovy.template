${packageDeclaration}

import com.the6hours.grails.springsecurity.facebook.FacebookAuthDao
import com.the6hours.grails.springsecurity.facebook.FacebookAuthToken
import org.springframework.security.core.GrantedAuthority
import org.apache.log4j.Logger
import org.springframework.security.core.authority.GrantedAuthorityImpl
import ${domainClassFullName}

/**
 * Autogenerated implementation of FacebookAuthDao
 *
 */
class ${daoClassName} implements FacebookAuthDao<${domainClassName}>  {

    private static def log = Logger.getLogger(this)

    /**
     * Tries to load app user for Facebook user
     *
     * @param uid UID of Facebook user
     * @return existing user, or null if there is no user for specified uid
     */
    ${domainClassName} findUser(long uid) {
        //must be fine for most cases
        return ${domainClassName}.findByUid(uid)
    }

    /**
     * Called when logged in facebook user doesn't exists in current database
     *
     * @param token information about current authnetication
     * @return just created user
     */
    ${domainClassName} create(FacebookAuthToken token) {
        ${domainClassName} user = new ${domainClassName}(
            accessToken: token.accessToken,
            uid: token.uid
        )
        //TODO set relations with your own domains (user,roles)
        //TODO fill with extra data from Facebook API
        ${domainClassName}.withTransaction {
            user.save()
        }
        return user
    }

    /**
     * Called when facebook auth token has been changed
     *
     * @param user updates used details
     */
    void update(${domainClassName} user) {
        //TODO change regarding your domains structure
        ${domainClassName}.withTransaction {
            user.save()
        }
    }

    /**
     * Returns `principal` that will be stored into Security Context. It's good if it
     * implements {@link org.springframework.security.core.userdetails.UserDetails UserDetails} or
     * {@link java.security.Principal Principal}.
     *
     * At most cases it's just current user, passed as parameter
     *
     * @param user current user
     * @return user to put into Security Context
     */
    Object getPrincipal(${domainClassName} user) {
        //TODO change regarding your domains structure
        return user;
    }

    /**
     * Roles for current user
     *
     * @param user current user
     * @return roles for user
     */
    Collection<GrantedAuthority> getRoles(${domainClassName} user) {
        //TODO change regarding your domains structure
        Collection<GrantedAuthority> roles = []
        ${domainClassName}.withTransaction {
            roles = user.roles
        }
        return roles
    }

}
